---
title: "Descriptives"
author: "Aaron Mackay"
output:
  html_document:
    toc: yes
    toc_float: yes
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(gt)
library(lubridate)
library(kableExtra)
library(table1)

load("Data/Data.frame/data.full.Rda")
load("Data/Data.frame/screened.full.Rda")
load("Data/Data.frame/screened.Rda")
load("Data/Data.frame/cleaned.Rda")
```

## Screening and Cleaning Data

Data screening and cleaning occurs in "wrangle.R", from which the output are saved both as .csv files (located in "Data/Cleaning") and R objects (located in "Data/Data.frame").  
Instructions on what the screening process is are in the README file.

When new data comes in, it should first be processed in "wrangle.R" before the script for this document is run again.  While "wrangle.R" requires the data to be manually updated (more info on this in the README), once the new data is processed, this document just needs to be run (and not updated).  It will incorporate the new data automatically in the output and analyses.

<strong>The following tables outline the number of observations that were removed at each stage of the cleaning process and gives a general overview as to how the final data looks:</strong>

<br>

```{r screen.count, echo=FALSE}
n.observations <- tibble(
  Type = c("Full", "Screened", "Cleaned"),
  n = c(nrow(data.full), nrow(screened), nrow(cleaned))
)

n.bad <- tibble(
  #Export.Date = today(),
  Type = c("Non-Consenting", "Spam", "Not Full License", "Incomplete DDDI"),
  "Full Data" = c(
    nrow(data.full %>% filter(Q25 != "Yes")),
    nrow(data.full %>% filter(Status == "Spam")),
    nrow(data.full %>% filter(!Q126...13 %in% c("Full license (current/valid)", 
                                           "Full license (expired/revoked)"),
                              Status != "Spam")),
    nrow(data.full %>% filter(keep_DDDI == "FALSE",
                              Status != "Spam",
                              !Q126...13 %in% c("Full license (current/valid)", 
                                           "Full license (expired/revoked)")))
  ),
  "Screened Data" = c(
    NA,
    NA,
    NA,
    nrow(screened %>% filter(keep_DDDI == "FALSE"))
  )
)

n.observations %>% 
  gt() %>% 
  tab_header("Number of Observations in each dataset")

kable(n.observations, caption = "a table")


```

<br>

```{r screen.count2, echo = F}
n.bad %>% gt() %>% 
  tab_header("Number of \"bad\" items in Full and Screened data - needs fixing")
```

```{r prep, include = F}
# Changing NA from meth_ingest and meth_user to "No"
cleaned$meth_ingest[is.na(cleaned$meth_ingest)] <- "No"
cleaned$meth_user[is.na(cleaned$meth_user)] <- "Non-User"
cleaned$meth_user <- as.factor(cleaned$meth_user)

# Preparing colours for graphs
.grey <- "#A6A6A6"
.ma <- "#DC2D27"
.nma <- "#80B9C9"
.lav <- "#D9BBDC"
.lgreen <- "#BEDCB3"

# Rearranging levels for education 
cleaned$education <- factor(cleaned$education, levels = c("Did not finish high school",
                                                          "High School Diploma",
                                                          "Vocational/Technical degree or certificate",
                                                          "Did not finish University",
                                                          "Bachelor Degree",
                                                          "Postgraduate Degree"))
```

***

## Demographic Summary Table
```{r desc.summary, echo = F}
x <- cleaned %>% mutate(ethnicity = reorder(ethnicity, ethnicity, function(x) -length(x)),
                        meth_user = reorder(meth_user, meth_user, function(x) length(x)),
                        area_live = reorder(area_live, area_live, function(x) length(x)))
label(x$age) <- "Age"
label(x$sex) <- "Sex"
label(x$meth_ingest) <- "MA Ingest"
label(x$meth_user) <- "MA User Type"
label(x$license_status) <- "License Status"
label(x$education) <- "Education"
label(x$ethnicity) <- "Ethnicity"
label(x$area_live) <- "Area of Residence"


table1(~age + sex + meth_ingest + meth_user + license_status + education + ethnicity + area_live, data = x)

```

***

## Distribution of Demographics {.tabset}

### MA Use

```{r distr.ma, echo = F}
plot.count <- cleaned %>%
  ggplot(aes(x = reorder(meth_user, meth_user, function(x) -length(x)))) +
  geom_bar(fill = .grey, col = "black") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -.3) +
  labs(x = "Type of User", y = "n") +
  ggtitle("Count of MA and non-MA users") +
  theme_light()

plot.count
```

***

### Sex
```{r distr.sex, echo = F}
bar.sex <- cleaned %>% 
  ggplot(aes(x = sex, fill = sex)) +
  geom_bar(col = "black") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -.3) +
  labs(x = "Sex", y = "") +
  ggtitle("Sex Count") +
  theme_light() +
  theme(legend.position = "none") +
  scale_fill_manual(values = c(.lav, .lgreen))

bar.sex.ma <- cleaned %>%
  ggplot(aes(x = sex, fill = meth_ingest)) +
  geom_bar(col = "black") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -.3) +
  labs(x = "Sex", y = "n") +
  ggtitle("Sex count by MA use") +
  theme_light() +
  theme(legend.position = "none") +
  facet_wrap(~ meth_ingest) +
  scale_fill_manual(values = c(.ma, .nma))

bar.sex

bar.sex.ma

```

***

### Age
```{r distr.age, echo = F}
# Histogram age
hist.age <- cleaned %>% 
  ggplot(aes(x = age)) +
  geom_histogram(binwidth = 2, col = "black", fill = .grey) +
  labs(x = "Age", y = "") +
  ggtitle("Distribution of Age") +
  theme_light()

#Histogram of age by MA
hist.age.ma <- cleaned %>%
  ggplot(aes(x = age, fill = meth_ingest)) +
  geom_histogram(binwidth = 1, col = "black") +
  labs(x = "Age", y = "", fill = "MA Use") +
  ggtitle("Distribution of Age by MA use") +
  theme_light() +
  facet_grid(meth_ingest ~.) +
  scale_fill_manual(values = c(.ma, .nma))

# Density plot of age by MA
dens.age.ma <- cleaned %>% 
  ggplot(aes(x = age, fill = meth_ingest)) +
  geom_density(alpha = 0.5) +
  labs(x = "Age", y = "Density", fill = "MA Use") +
  ggtitle("Distribution of Age by MA use (Density)") +
  theme_light() +
  scale_fill_manual(values = c(.ma, .nma))


hist.age
hist.age.ma
dens.age.ma
```

***

### Education
```{r distr.edu, echo = F}
bar.edu <- cleaned %>% 
  mutate(education = fct_reorder(education, desc(education))) %>% 
  ggplot(aes(x = education)) +
  geom_bar(col = "black", fill = .grey) +
  coord_flip() +
  labs(x = "Education Level", y = "") +
  ggtitle("Education Count") +
  theme_light()

bar.edu.ma <- cleaned %>%
  mutate(education = fct_reorder(education, desc(education))) %>% # Reorder levels of education 
  ggplot(aes(x = education, fill = meth_ingest)) +
  geom_bar(position = "dodge", col = "black") +
  #geom_text(stat = "count", aes(label = ..count..)) +
  coord_flip() +
  labs(x = "Education Level", y = "", fill = "MA Use") +
  ggtitle("Education count by MA use") +
  theme_light() +
  scale_fill_manual(values = c(.ma, .nma))

bar.edu

bar.edu.ma

```

***

### Ethnicity
```{r distr.eth, echo = F}
bar.eth <- cleaned %>% 
  ggplot(aes(x = reorder(ethnicity, ethnicity, function(x) -length(x)))) +
  geom_bar(fill = .grey, col = "black") +
  geom_text(stat = "count", aes(label = ..count..), hjust = -.3) +
  coord_flip() +
  labs(x = "Ethnicity", y = "") +
  theme_light() +
  ggtitle("Ethnicity")

bar.eth.ma <- cleaned %>%
  ggplot(aes(x = reorder(ethnicity, ethnicity, function(x) -length(x)), fill = meth_ingest)) +
  geom_bar(col = "black", position = "dodge") +
  coord_flip() +
  labs(x = "Ethnicity", y = "", fill = "MA Use") +
  ggtitle("Ethnicity by MA Use") +
  theme_light() +
  scale_fill_manual(values = c(.ma, .nma))

bar.eth

bar.eth.ma

```

***

### Area of Residence
```{r distr.live, echo = F}
cleaned %>% 
  ggplot(aes(x = reorder(area_live, area_live, function(x) length(x)))) +
  geom_bar(fill = .grey, col = "black") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -.3) +
  labs(x = "Area of Residence", y = "") +
  ggtitle("Area of Residence") +
  theme_light()

cleaned %>% 
  ggplot(aes(x = reorder(area_live, area_live, function(x) length(x)), fill = meth_ingest)) +
  geom_bar(col = "black", position = "dodge") +
  labs(x = "Area of Residence", fill = "MA Use") +
  ggtitle("Area of Residence by MA Use") +
  scale_fill_manual(values = c(.ma, .nma)) +
  theme_light();
```

***

## Bivariate distribution of key variables 
### Dula Dangerous Driving Index (DDDI) {.tabset}
#### About
The DDDI includes 28$^*$ items (divided into 3 categorical subscales) with each item assessing a persons tendency to engage in certain driving practices or beliefs held around specific driving behaviours.  Each item is scored on a 5-point Likert scale from 1 (Never) to 5 (Always).

<br>

The total score can be used as a composite measure for one's tendency and/or willingness to engage in dangerous driving.  Scores can range from 27 to 135.

<br>

##### Subscales:

**Aggressive Driving:**
Assessed with 7 items which reflect behaviours that are intentionally meant to annoy, irritate or punish other drivers.  E.g. *I flash my headlights when I am annoyed by another driver.*

Scores range from 7 to 35.

<br>

**Negative Emotional Driving:**
Assessed with 9 items which gauge irritability and anger while driving and the tendency to become annoyed with other drivers.  E.g. *I lose my temper while driving.*

Scores range from 9 to 45.

<br>

**Risky Driving:**
Assessed with 11 items which gauge ones willingness to engage in unsafe driving behaviours.  E.g. *I will "drag race" other drivers at stop lights to get out front.*

Scores range from 11 to 55. 

<br>
<br>

$^*$The present study used 27 items with one item from the "Risky Driving" subscale - *I will weave in and out of slower traffic* - omitted from the questionnaire. 

***

#### Total Score
```{r di.total, echo = F}
# Summary Table

# Histogram
cleaned %>% 
  ggplot(aes(x = DDDI_Total)) +
  geom_histogram(binwidth = 3, col = "black", fill = .grey) +
  labs(x = "DDDI Total Score", y = "") +
  ggtitle("Distribution of DDDI Total Score") +
  theme_light()

# Hist by MA
cleaned %>% 
  ggplot(aes(x = DDDI_Total, fill = meth_ingest)) +
  geom_histogram(binwidth = 3, col = "black") +
  labs(x = "DDDI Total Score", y = "", fill = "MA Use") +
  ggtitle("DDDI Total Score by MA Use") +
  theme_light() +
  facet_grid(meth_ingest ~.) +
  theme(legend.position = "none") +
  scale_fill_manual(values = c(.ma, .nma))

# Dens by MA
cleaned %>% 
  ggplot(aes(x = DDDI_Total, fill = meth_ingest)) +
  geom_density(col = "black", alpha = 0.5) +
  scale_fill_manual(values = c(.ma, .nma)) +
  labs(x = "DDDI Total Score", y = "Density", fill = "MA Use") +
  ggtitle("DDDI Total by MA Use (Density)") +
  theme_light()

# Box and scatter
cleaned %>% 
  ggplot(aes(x = meth_ingest, y = DDDI_Total, fill = meth_ingest)) +
  geom_boxplot(outlier.alpha = 0) +
  geom_jitter(width = 0.08, alpha = 0.5) +
  theme_light() +
  labs(x = "MA Use", y = "DDDI Total") +
  ggtitle("Box plot of DDDI Total by MA Use") +
  theme(legend.position = "none") +
  scale_fill_manual(values = c(.ma, .nma))

```

***

#### Aggressive Driving
```{r di.AG, echo = F}
# Histogram
cleaned %>% 
  ggplot(aes(x = DDDI_AD_Total)) +
  geom_histogram(binwidth = 2, col = "black", fill = .grey) +
  labs(x = "DDDI Aggression Score", y = "") +
  ggtitle("Distribution of DDDI Total Score") +
  theme_light()

# Hist by MA
cleaned %>% 
  ggplot(aes(x = DDDI_AD_Total, fill = meth_ingest)) +
  geom_histogram(binwidth = 2, col = "black") +
  labs(x = "DDDI Aggression Score", y = "", fill = "MA Use") +
  ggtitle("DDDI Aggression by MA Use") +
  theme_light() +
  facet_grid(meth_ingest ~.) +
  theme(legend.position = "none") +
  scale_fill_manual(values = c(.ma, .nma))

# Dens by MA
cleaned %>% 
  ggplot(aes(x = DDDI_AD_Total, fill = meth_ingest)) +
  geom_density(col = "black", alpha = 0.5) +
  scale_fill_manual(values = c(.ma, .nma)) +
  labs(x = "DDDI Aggression Score", y = "Density", fill = "MA Use") +
  ggtitle("DDDI Aggression by MA Use (Density)") +
  theme_light()

# Box and scatter
cleaned %>% 
  ggplot(aes(x = meth_ingest, y = DDDI_AD_Total, fill = meth_ingest)) +
  geom_boxplot(outlier.alpha = 0) +
  geom_jitter(width = 0.08, alpha = 0.5) +
  theme_light() +
  labs(x = "MA Use", y = "DDDI Aggression") +
  ggtitle("Box plot of DDDI Aggression by MA Use") +
  theme(legend.position = "none") +
  scale_fill_manual(values = c(.ma, .nma))

```

***

#### Negative Emotional Driving
```{r di.NE, echo = F}
# Histogram
cleaned %>% 
  ggplot(aes(x = DDDI_NE_Total)) +
  geom_histogram(binwidth = 2, col = "black", fill = .grey) +
  labs(x = "DDDI NED Score", y = "") +
  ggtitle("Distribution of DDDI Negative Emotional Driving (NED) Score") +
  theme_light()

# Hist by MA
cleaned %>% 
  ggplot(aes(x = DDDI_NE_Total, fill = meth_ingest)) +
  geom_histogram(binwidth = 2, col = "black") +
  labs(x = "DDDI NED Score", y = "", fill = "MA Use") +
  ggtitle("DDDI NED by MA Use") +
  theme_light() +
  facet_grid(meth_ingest ~.) +
  theme(legend.position = "none") +
  scale_fill_manual(values = c(.ma, .nma))

# Dens by MA
cleaned %>% 
  ggplot(aes(x = DDDI_NE_Total, fill = meth_ingest)) +
  geom_density(col = "black", alpha = 0.5) +
  scale_fill_manual(values = c(.ma, .nma)) +
  labs(x = "DDDI NED Score", y = "Density", fill = "MA Use") +
  ggtitle("DDDI NED by MA Use (Density)") +
  theme_light()

# Box and scatter
cleaned %>% 
  ggplot(aes(x = meth_ingest, y = DDDI_NE_Total, fill = meth_ingest)) +
  geom_boxplot(outlier.alpha = 0) +
  geom_jitter(width = 0.08, alpha = 0.5) +
  theme_light() +
  labs(x = "MA Use", y = "DDDI NED") +
  ggtitle("Box plot of DDDI NED by MA Use") +
  theme(legend.position = "none") +
  scale_fill_manual(values = c(.ma, .nma))
```

***

#### Risky Driving
```{r di.RD, echo = F}
# Histogram
cleaned %>% 
  ggplot(aes(x = DDDI_RD_Total)) +
  geom_histogram(binwidth = 2, col = "black", fill = .grey) +
  labs(x = "DDDI Risky Driving Score", y = "") +
  ggtitle("Distribution of DDDI Risky Driving Score") +
  theme_light()

# Hist by MA
cleaned %>% 
  ggplot(aes(x = DDDI_RD_Total, fill = meth_ingest)) +
  geom_histogram(binwidth = 2, col = "black") +
  labs(x = "DDDI Risky Driving Score", y = "", fill = "MA Use") +
  ggtitle("DDDI Risky Driving by MA Use") +
  theme_light() +
  facet_grid(meth_ingest ~.) +
  theme(legend.position = "none") +
  scale_fill_manual(values = c(.ma, .nma))

# Dens by MA
cleaned %>% 
  ggplot(aes(x = DDDI_RD_Total, fill = meth_ingest)) +
  geom_density(col = "black", alpha = 0.5) +
  scale_fill_manual(values = c(.ma, .nma)) +
  labs(x = "DDDI Risky Driving Score", y = "Density", fill = "MA Use") +
  ggtitle("DDDI Risky Driving by MA Use (Density)") +
  theme_light()

# Box and scatter
cleaned %>% 
  ggplot(aes(x = meth_ingest, y = DDDI_RD_Total, fill = meth_ingest)) +
  geom_boxplot(outlier.alpha = 0) +
  geom_jitter(width = 0.08, alpha = 0.5) +
  theme_light() +
  labs(x = "MA Use", y = "DDDI Risky Driving") +
  ggtitle("Box plot of DDDI Risky Driving by MA Use") +
  theme(legend.position = "none") +
  scale_fill_manual(values = c(.ma, .nma))
```

***

### STAXI-2 {.tabset}
#### About
The State-Trait Anger Expression Inventory (STAXI-2) is designed to understand the attitudes, emotional states and behaviours that are typical to a person in regard to their feelings, control and expression of anger.  It distinguishes anger between being a passing/present state as a personality trait.

*Description of scoring*

##### State Anger
Assesses the intensity of the individual's angry feelings at time of testing.

##### Subscales:
**Feeling Angry (S-Ang/F):**
TBC

<br>

**Feel like verbally expressing anger (S-Ang/V):**
TBC

<br>

**Feel like physically expressing anger (A-Ang/P):**
TBC

***

#### State Anger Total
```{r staxi.state, echo = F}
# Histogram
cleaned %>% 
  ggplot(aes(x = S_Ang_Total)) +
  geom_histogram(binwidth = 1, col = "black", fill = .grey) +
  labs(x = "State Anger", y = "") +
  ggtitle("Distribution of State Anger Scores") +
  theme_light()

# Hist by MA
cleaned %>% 
  ggplot(aes(x = S_Ang_Total, fill = meth_ingest)) +
  geom_histogram(binwidth = 1, col = "black") +
  labs(x = "State Anger", y = "", fill = "MA Use") +
  ggtitle("State Anger by MA Use") +
  theme_light() +
  facet_grid(meth_ingest ~.) +
  theme(legend.position = "none") +
  scale_fill_manual(values = c(.ma, .nma))

# Dens by MA
cleaned %>% 
  ggplot(aes(x = S_Ang_Total, fill = meth_ingest)) +
  geom_density(col = "black", alpha = 0.5) +
  scale_fill_manual(values = c(.ma, .nma)) +
  labs(x = "State Anger", y = "Density", fill = "MA Use") +
  ggtitle("State Anger by MA Use (Density)") +
  theme_light()

# Box and scatter
cleaned %>% 
  ggplot(aes(x = meth_ingest, y = S_Ang_Total, fill = meth_ingest)) +
  geom_boxplot(outlier.alpha = 0) +
  geom_jitter(width = 0.08, alpha = 0.5) +
  theme_light() +
  labs(x = "MA Use", y = "State Anger") +
  ggtitle("Box plot of State Anger by MA Use") +
  theme(legend.position = "none") +
  scale_fill_manual(values = c(.ma, .nma))
```

***

#### Trait Anger Total
```{r staxi.trait, echo = F}
# Histogram
cleaned %>% 
  ggplot(aes(x = T_Ang_Total)) +
  geom_histogram(binwidth = 1, col = "black", fill = .grey) +
  labs(x = "Trait Anger", y = "") +
  ggtitle("Distribution of Trait Anger Scores") +
  theme_light()

# Hist by MA
cleaned %>% 
  ggplot(aes(x = T_Ang_Total, fill = meth_ingest)) +
  geom_histogram(binwidth = 1, col = "black") +
  labs(x = "Trait Anger", y = "", fill = "MA Use") +
  ggtitle("Trait Anger by MA Use") +
  theme_light() +
  facet_grid(meth_ingest ~.) +
  theme(legend.position = "none") +
  scale_fill_manual(values = c(.ma, .nma))

# Dens by MA
cleaned %>% 
  ggplot(aes(x = T_Ang_Total, fill = meth_ingest)) +
  geom_density(col = "black", alpha = 0.5) +
  scale_fill_manual(values = c(.ma, .nma)) +
  labs(x = "Trait Anger", y = "Density", fill = "MA Use") +
  ggtitle("Trait Anger by MA Use (Density)") +
  theme_light()

# Box and scatter
cleaned %>% 
  ggplot(aes(x = meth_ingest, y = T_Ang_Total, fill = meth_ingest)) +
  geom_boxplot(outlier.alpha = 0) +
  geom_jitter(width = 0.08, alpha = 0.5) +
  theme_light() +
  labs(x = "MA Use", y = "Trait Anger") +
  ggtitle("Box plot of Trait Anger by MA Use") +
  theme(legend.position = "none") +
  scale_fill_manual(values = c(.ma, .nma))
```

***





